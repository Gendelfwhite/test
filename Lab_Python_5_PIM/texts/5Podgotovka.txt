В этой главе мы разработаем программу на основе библиотеки PyTorch и продемонстрируем процесс обучения многослойной полносвязной нейронной сети с использованием набора данных о ценах на жилье. Процесс решения задачи классификации или регрессии с помочью нейронных сетей состоит из следующих этапов: Сбор данных для обучения. Выбор данных для обучения сети и их обработка является самым сложным этапом решения задачи. Исходные данные преобразуются к виду, в котором их можно подать на входы сети. Каждая запись в файле данных называется обучающей парой или обучающим вектором. Выбор топологии сети. Выбирать тип сети следует исходя из постановки задачи и имеющихся данных для обучения. Для обучения с учителем требуется наличие для каждого элемента выборки «экспертной» оценки. Экспериментальный подбор характеристик сети. После выбора общей структуры нужно экспериментально подобрать параметры сети. Для сетей, подобных перцептрону, это будет число слоёв, число нейронов в скрытых слоях, наличие или отсутствие обходных соединений, передаточные функции нейронов. Экспериментальный подбор параметров обучения. После выбора конкретной топологии необходимо выбрать параметры обучения нейронной сети. От правильного выбора параметров зависит не только то, насколько быстро ответы сети будут сходиться к правильным ответам. Например, выбор низкой скорости обучения увеличит время схождения, однако иногда позволяет избежать паралича сети. Значения параметров нужно выбирать экспериментально, руководствуясь при этом критерием завершения обучения (например, минимизация ошибки или ограничение по времени обучения). Обучение сети. В процессе обучения сеть в определённом порядке просматривает обучающую выборку. При обучении с учителем набор исходных данных делят на две части – собственно обучающую выборку и тестовые данные; принцип разделения может быть произвольным. Обучающие данные подаются сети для обучения, а тестовые используются для расчета ошибки сети (проверочные данные никогда для обучения сети не применяются). Таким образом, если на тестовых данных ошибка уменьшается, то сеть действительно выполняет обобщение. Если ошибка на обучающих данных продолжает уменьшаться, а ошибка на тестовых данных увеличивается, значит, сеть перестала выполнять обобщение и просто «запоминает» обучающие данные. Это явление называется переобучением сети. В таких случаях обучение обычно прекращают. 39 Проверка адекватности обучения. Тестирование качества обучения нейросети необходимо проводить на примерах, которые не участвовали в её обучении. Программный код примера расположен по адресу: https://github.com/fgafarov1977/pytorch_nn_tutorial/blob/main/train_ffnn.ipynb. В самом начале программы мы подключаем необходимые нам модули и функции Python. Библиотека Pandas дает нам возможность быстро и эффективно манипулировать таблицами с данными. Библиотека numpy необходима для работы с массивами, а matplotlib для визуализации данных. Таже мы импортируем необходимые функции библиотеки sklearn, которые будут использованы для загрузки и подготовки данных, а также для оценки качества обученной модели. Это функция load_boston для загрузки данных, функция train_test_split – для разделения данных на обучающую и тестовую выборки и r2_score – для вычисления коэффициента детерминации. Естественно, мы также подключаем библиотеку PyTorch, и функции этой библиотеки, которые позволят нам построить и обучить нейронную сеть (см. рис. 35). Рис. 35. Подключение необходимых библиотек В качестве примера используем Boston Housing Dataset. Этот набор данных состоит из 13 признаков и содержит информацию, собранную Службой переписи населения США о характеристиках недвижимости в районах Бостона. Среди признаков имеются такие, как количество комнат, уровень преступности в районе, ставка налога на недвижимость, возраст людей, которым принадлежит дом, соотношение числа учащихся и преподавателей в районе и другие признаки. Мы будем использовать этот набор данных для прогнозирования средней стоимости дома на основе других признаков имеющихся в этом наборе данных, т. е. мы будем 40 решать задачу регрессии. Загружаем этот набор данных в переменную Python, используя метод load_boston, поэтому нам нет особой необходимости скачивать его откуда-либо. Однако вы можете его скачать самостоятельно с сайта, который указан в дополнительных материалах и загрузить с помощью методов библиотеки pandas. Далее мы конвертируем его в датафрейм Pandas, для того, что мы могли с ним удобно работать и выводим его на консоль, чтобы посмотреть значения, имеющиеся в этом наборе данных. Также мы можем визуализировать эти данные в виде различных графиков с использованием возможностей библиотеки matplotlib. (см. рис. 36). Рис. 36. Загрузка и визуализация данных (Boston Housing Dataset) На рис. 37 показан пример диаграммы рассеяния, которая показывает зависимость стоимости дома от количества комнат. Аналогично вы можете построить зависимости цен домов и от других параметров. Рис. 37. Зависимость цены дома от количества комнат 41 На этапе подготовки данных сначала выбираем столбцы таблицы с данными, которые будут использованы в качестве входных данных и целевых значений. При решении задач машинного обучения рекомендуется нормализовать данные, чтобы значения находились в определенном интервале. Для этого здесь мы используем класс StandardScaler библиотеки sklearn (см. рис. 38). Далее мы разделяем весь имеющийся у нас набор данных на тестовую и обучающую выборки. Это делается с помощью вызова метода train_test_split, в котором в качестве параметров мы также указываем и долю данных, которые будут выделены в тестовую выборку. В нейронную сеть данные необходимо подавать в виде тензоров PyTorch, поэтому мы конвертируем наши данные в тензоры. В результате мы получаем тензор x_train_tensor в качестве входных данных, а y_train_tensor – это целевые значения.