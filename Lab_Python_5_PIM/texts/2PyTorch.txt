ГЛАВА 1. Основы PyTorch. Работа с тензорами в PyTorch PyTorch – это фреймворк машинного обучения, построенный на основе языка программирования Python. В настоящее время язык Python является одним из наиболее популярных языков программирования при построении проектов машинного обучения. Популярность этого языка программирования связана с его удобством и простотой, а также наличием огромного количества разнообразных библиотек и модулей для решения задач в различных областях. PyTorch является проектом с открытым исходным кодом, поэтому любой желающий может участвовать в развитии этого проекта. Изначально PyTorch, который назывался просто Torch, был разработан на языке Lua, и его первый релиз был 2002 г. Потом появилась версия на языке Python, который был назван PyTorch. PyTorch используется для решения различных задач, таких как машинное обучение, нейронные сети, компьютерное зрение, обработка естественного языка и звука, и многих других. Перечислим основные особенности библиотеки PyTorch. Во-первых, это простой и удобный в использовании программный интерфейс API (application programming interface). Благодаря этом интерфейсу разрабатывать программный код во фреймворке PyTorch довольно просто, наглядно и удобно. Пользователь может без особых сложностей построить модели самых разнообразных нейронных сетей, эффективно организовать процесс их обучения и применять обученные модели уже на практике в самых разных областях. Вторая важная особенность – это использование языка программирования Python. Благодаря этому разработчики проектов машинного обучения в PyTorch фреймворке могут использовать все возможности и функции, предлагаемые средой Python. Третья важная особенность – это использование вычислительных графов, которые, по сути, являются основой этой библиотеки. PyTorch предоставляет собой платформу, которая содержит в себе необходимые инструменты для работы с динамическими вычислительными графами и инструменты автоматического вычисления градиентов и производных на их основе. К настоящему времени вокруг этого фреймворка выстроена довольно обширная экосистема, состоящая из различных библиотек, разрабатываемых сторонними разработчиками и командами, которые расширяют возможности PyTorch, упрощают и ускоряют процесс обучения моделей. Наиболее известные из них перечислены ниже. 1. TorchVision. Эта библиотека предоставляет набор инструментов и датасетов для компьютерного зрения, включая функции для работы с изображениями, аугментации данных и предобученные модели. 8 2. TorchText. Библиотека для обработки текстовых данных, включающая в себя функции токенизации, представления текста и другие утилиты для работы с естественным языком. 3. TorchAudio. Данная библиотека содержит инструменты для обработки аудиоданных, включая функции извлечения признаков, преобразования и предварительно обученные модели. 4. TorchHub. Библиотека, которая позволяет легко обмениваться и использовать предобученные модели и компоненты, обеспечивая удобный доступ к моделям, опубликованным сообществом. 5. Ignite. Библиотека для управления обучением и оценкой моделей. Предоставляет инструменты для организации цикла обучения, визуализации результатов и других операций. 6. PyTorch Lightning. Высокоуровневая библиотека для обучения глубоких нейронных сетей, предоставляющая удобный интерфейс и автоматизированный цикл обучения. 7. Catalyst. Библиотека для управления обучением, предоставляющая набор инструментов для обучения и оценки моделей. 8. PyTorch Geometric. Библиотека, предназначенная для работы с графовыми данными и графовыми нейронными сетями. PyTorch содержит мощные и удобные инструменты и методы для работы с тензорами. Тензоры PyTorch похожи на массивы numpy, однако имеют дополнительные возможности, с помощью которых их можно эффективно и удобно использовать в проектах машинного обучения. Для построения различных типов нейронных сетей имеется большое количество различных готовых слоев, которые легко можно использовать. В настоящее время PyTorch содержит десятки различных слоев, среди которых есть линейные слои, разнообразные сверочные слои, рекуррентные слои, слои нормализации, дропаут слои, и многие другие. Возможность использования графических процессоров для проведения высокопроизводительных вычислений в настоящее чрезвычайно необходима для обучения и использования нейронных сетей. Большинство «боевых» проектов машинного обучения использует графические процессоры. PyTorch позволяет в полной мере использовать все возможности, предоставляемые графическими процессорами на основе платформы CUDA. Благодаря использованию GPU вычисления можно проводить в десятки и сотни раз быстрее, чем на обычных процессорах СPU. Проведение вычислений с тензорами PyTorch на устройствах CUDA заложено в самом ядре фреймворка, поэтому даже без глубоких теоретических знаний касательно вычислений на CUDA можно легко и эффективно его использовать. 9 Перечислим основные модули, которые непосредственно используются при организации проектов машинного обучения. Модуль Autograd. Этот модуль используется для автоматического вычисления производных в вычислительном графе. На основе возможностей этого модуля производится сохранение в памяти истории последовательных вычислений, произведенных в прямом направлении. Затем на их основе производится воспроизведение этих вычислений в обратном порядке для автоматического вычисления градиентов. Этот модуль очень удобен и эффективен при построении и обучении нейронных сетей. Модуль Optim. Этот модуль, реализует основные алгоритмы оптимизации, которые используются при обучении нейронных сетей. В нем реализовано большинство наиболее часто используемых методов оптимизации, таких как стохастический градиентный спуск, метод Adama, метод Adagrad, и многие другие. Модуль nn. Это базовый класс для всех модулей нейронной сети, все модели, создаваемые пользователями, также должны наследоваться от этого класса. В этом модуле также содержаться все слои, которые уже имеются в PyTorch.